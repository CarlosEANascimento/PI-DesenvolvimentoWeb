//magos
mage = {
	kind: 0,
	name_surname: random_name() + " " + surname_by_type(mage.type),
	spell_object: obj_bard_mage_spell,
	spell_speed: 2,
	spell_damage: 2,
	spell_range: 320,
	action_frame: 2.0,
	spell_source_x: 1,
	spell_source_y: 4,
	status: 0													
};

//var _alvo, _range, _spell, _spell_inst, _spell_speed, _action_frame, _source_x, _source_y, _spell_damage,_status;
var _alvo, _spell_inst;

if(mage.status != 0){
	//fazer função para isso
	//ideias:
	// slimes e glowing wisp -> diminuir image_speed
	// crimson slaad, humonguos ettin -> diminui o dano
	// fungal -> põe pra dormir
	//só pode 1 status por vez e eles não podem se sobrepor
	image_speed *= 1;
}

if(instance_exists(obj_enemy)){
	_alvo = instance_nearest(mage.spell_source_x, mage.spell_source_y, obj_enemy);
	image_xscale = (x < _alvo.x)? 1 : -1 ;
	
	show_debug_message(mage);
	
	if(distance_to_object(_alvo) < mage.spell_range  && image_index == mage.action_frame){
		show_debug_message("conjurar");
		_spell_inst = instance_create_depth(x + mage.spell_source_x * sign(image_xscale), y + mage.spell_source_y, depth - 1, mage.spell_object);
		_spell_inst = instance_create_depth(x, y, depth - 1, mage.spell_object);
		
		_spell_inst.spell.target_x = _alvo.x;
		_spell_inst.spell.target_y = lerp(_alvo.y, _alvo.bbox_top, 0.5);
		
		_spell_inst.spell.origin_x = x + mage.spell_source_x;
		_spell_inst.spell.origin_y = y + mage.spell_source_y;
		_spell_inst.spell.damage = mage.spell_damage;
		_spell_inst.spell.spell_speed = mage.spell_speed;
	}
	
}else if(alarm[0] <= 0){
	image_xscale = sign(random_range(-10,10));
	alarm[0] = random(60);
}

//feitiço
spell = {
	target_x: 0,
	target_y: 0,
	origin_x: 0,
	origin_y: 0,
	damage: 0,
	spell_speed: 0
}

first_frame = true;

if(first_frame){
	move_towards_point(spell.target_x, spell.target_y, spell.spell_speed);
	image_angle = round(point_direction(spell.origin_x, spell.origin_y, spell.target_x, spell.target_y));
	first_frame = false;
}

draw_self();

//var _target_x = (x < lerp(24*16,25*16,0.5))? 24*16 : 25*16 ;
//var _target_y = 3*16;

//var _i, _j;
//var _grid_x_ceil;
//var _grid_y_ceil;

//var _variation_x = abs(x - _target_x);
//var _variation_y = abs(y - _target_y);

//var _n_turn_points, _length_straight;

//_i = 0;
//while(_i < x){
//	_i += 16;
//}
//_grid_x_ceil = _i;
//_i = 0
//while(_i < y){
//	_i += 16;
//}
//_grid_y_ceil = _i;

////if(_variation_x > _variation_y){
////	_n_turn_points = floor(_variation_x/_variation_y);
////	_length_straight = _n_turn_points;
	
	
////}else{
////	_n_turn_points = floor(_variation_y/_variation_x);
////}

//for(_i = 0; _i <= _variation_x/16; _i++){
//	for(_j = 0; _j <= _variation_y/16; _j++){
//		draw_circle(_grid_x_ceil + 16 * _i, _grid_y_ceil - 16 * _j, 1, 0);
//	}
//}

//draw_circle(_target_x, _target_y, 1, 0);
////draw_circle(_grid_x_ceil, _grid_y_ceil, 1, 0);
//draw_line(x,y,_target_x,_target_y);
//draw_line_color(_target_x,_target_y, _target_x, _target_y + _variation_y, c_red, c_red);
//draw_line_color(_target_x,_target_y, _target_x + (sign(x - _target_x) * _variation_x), _target_y, c_blue, c_blue);